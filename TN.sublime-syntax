%YAML 1.2
---
file_extensions:
- txt
- start
# - 1tok
scope: source.example-c

contexts:
  prototype:
    - include: comments
  #   - include: markup

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).

    - include: Capitilizations
    # - include: PluralvsPossessive
    - include: keywords
    - include: punctuation
    - include: numbers
    - include: strings
    - include: Misc


  Capitilizations: # colours CAPPED words that are not preceded, or followed by another CAPPED word
  # still has a problem with e.g. 'BMW And', i.e. when the firts letter of an adjacent word is capped
  # ACRONYMS:
    - match: '\b(?<![A-Z]\s)\b[A-Z_]{2,}\b(?!\s[A-Z]{2,})\b' # using negative lookahead, here the pattern cannot be followed by at least 2 capped characters
      scope: blue
    # - match: r'\b(F.B.I.)\b' # using negative lookahead
    #   scope: blue
  # CASED non BOL words:
    - match: '(?<!^)(?<!DELIMITER )(?<![\.\?\!\,] )[A-Z][a-z]+\b' # using negative lookahead, here the pattern cannot be followed by at least 2 capped characters
      scope: green


  # PluralvsPossessive: # colours CAPPED words that are not preceded, or followed by another CAPPED word
  # # still has a problem with e.g. 'BMW And', i.e. when the firts letter of an adjacent word is capped
  # # ACRONYMS:
  #   - match: '\b((\w){3,}s)\b' # using negative lookahead, here the pattern cannot be followed by at least 2 capped characters
  #     scope: lime

  keywords:
    - match: '\b(Stella)\b'
      scope: keywords

# more keywords in different colours can be added:
    # - match: '\b(test|)\b'
    #   scope: green

    # - match: '\b(|)\b'
    #   scope: red

    # - match: '\b(|)\b'
    #   scope: lime

  punctuation:
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operatorr.comparison.python

    - match: \.|\?|@|\%|\!|\#|\%|\^|\&|\=|\*|\(|\) #punctuation       #(\w+\?(?<!$)) matches eg word? word2 but not ... word? ie the end of the line queion marks
      scope: keyword.operator.arithmetic.python

  numbers:
    - match: '\b(-)?[0-9.]\w*'
      scope: constant.numeric

  strings:
    - match: '"'
      scope: lime # colours the 1st '"'
      push: inside_string

    - match: '"'
      scope: lime # this colours the first "`"
      push: inside_string3

# this colours what is inside the '" "'
  inside_string:
    - meta_include_prototype: true
    # - meta_scope: string.quoted.double.example-c
    - meta_scope: lime
    # - match: '~'
      # scope: constant.character.escape.example-c
      scope: lime
    - match: '"'
      # scope: punctuation.definition.string.end.example-c
      scope: lime # colours the 2nd '"'
      pop: true

  inside_string3:
    - meta_include_prototype: true
    - meta_scope: lime # this colours the inside characters (in between the "`")
    - match: "'"
      scope: lime #this is the second "`"
      pop: true

  Misc:
# Links/Url/Website_links
    - match: '(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]+\.[^\s]{2,}|www\.[a-zA-Z0-9]+\.[^\s]{2,})'
      scope: lightBlue
